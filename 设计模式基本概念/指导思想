1.可维护性
修改功能，需要修改的地方越少，可维护性就越好
2.可复用性Reusabilty
代码可以被以后重复使用
写出自己总结的类库
3.可扩展性
添加功能无需修改原来代码
4.灵活性
代码接口可以灵活调用




单一职责原则
一个类别太大，别太累，负责单一的职责
Person
PersonManager
高内聚、低耦合


开闭原则

对扩展开放，对修改关闭
 尽量不修改原来的代码的情况下进行扩展
抽象化，多态是开闭原则的关键


里氏替换原则
所有使用父类的地方，必须能够透明的使用子类对象


依赖倒置原则
依赖抽象，而不是面向具体
面向接口编程



迪米特法则

尽量不要和陌生人说话

和其他类的耦合度变低


接口隔离原则

每一个接口应该承担独立的角色，不干不该自己干的事儿

Flyable Runable 不该合二为一
避免子类实现不需要实现的方法
需要对客户提供接口的时候，只需要暴露最小的接口
